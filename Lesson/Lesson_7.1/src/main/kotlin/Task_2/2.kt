package org.example.Task_2

/**
 * Определите,
 * что валидирует данное регулярное выражение и напишите несколько строк,
 * которые валидны при его использовании.
 * (Проверьте с помощью Regex.Match).
 *
 * ^(19|20)\d\d[- /\.](0[1-9]|1[012])[- /\.](0[1-9]|[12][0-9]|3[01])$
 */
fun main() {
    val dates = listOf(
        "1999-12-31",
        "2005/01/15",
        "2023.11.30",
        "2090 02 28",
        "1899-01-01",
        "2023-13-01",
        "2023/00/15",
        "2023.02.31"
    )

    checkValidDates(dates)

    //Создала проверку с выводом из консоли, просто повыпендриваться))))
    println("Введите дату в формате ГГГГММДД начиная с 19 или с 20, с разделением .-/пробел: ")
    val dat = readln()
    println(isValidDate(dat))
}

/**
 * Функция, проверяет соответсвуют ли данные заданным параметрам
 *
 * @param Regex("""^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])${'$'}""") -
 * регулярное выражение с параметром даты ГГГГММДД начиная с 19 или с 20, с разделением .-/пробел.
 * @return regex.matches(dates) - вывод регулярного выражения. с полным совпадением в строке будет true
 */
fun isValidDate(dates: String): Boolean {
    val regex = Regex("""^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])${'$'}""")
    return regex.matches(dates)
}

/**
 * Функция принимает список дат,
 * преряет на соответсвие параметрам isValidDate и выводит в формате дата - результат
 *
 * @sample padEnd(11) - для красивого выравнивания
 */
fun checkValidDates(dates: List<String>): List<String> {
    dates.forEach { date ->
        println("${date.padEnd(11)} -> ${isValidDate(date)}")
    }
    return dates
}